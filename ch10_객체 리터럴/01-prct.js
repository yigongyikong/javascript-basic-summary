/**
 * 자바스크립트는 객체(object)기반의 프로그래밍 언어이며,
 *  자바스크립트를 구성하는 거의 "모든 것"이 객체다.
 * 원시값을 제외한 나머지 값(함수, 배열, 정규 표현식 등)은 모두 객체다.
 * 
 * 원시 타입은 단 하나의 값만 나타내지만 객체 타입은 다양한 타입의 값을 하나의 단위로 구성한
 *  복합적인 자료구조다.
 * 
 * 또한 원시 타입의 값, 즉 원시 값은 변경 불가능한 값(immutable value)이지만 객체 타입의 값,
 *  즉 객체는 변경 가능한 값(mutable value)이다.
 * 
 * 객체의 0개 이상의 프로퍼티로 구성된 집합이며, 프로퍼티는 키(key)와 값(value)으루 구성된다.
 * 
 * 자바스크립트에서 사용할 수 있는 모든 값은 프로퍼티 값이 될 수 있다.
 * 자바스크립트의 함수는 일급 객체이므로 값으로 취급할 수 있다.
 * 따라서 함수도 프로퍼티 값으로 사용할 수 있다.
 * 프로퍼티 값이 함수일 경우, 일반 함수와 구분하기 위해 메서드(method)라 부른다.
 * 
 * 프로퍼티 : 객체의 상태를 나타내는 값(data)
 * 메서드 : 함수인 프로퍼티로, 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 프로퍼티
 * 
 * C++나 자바 같은 클래스 기반 객체지향 언어는 클래스를 사전에 정의하고 필요한 시점에
 *  new 연산자와 함께 생성자를 호출하여 인스턴스를 생성하는 방식으로 객체를 생성한다.
 * 
 * 인스턴스(instance)란 클래스에 의해 생성되어 메모리에 저장된 실제를 말한다.
 * 클래스는 인스턴스를 생성하기 위한 템플릿의 역할을 한다.
 * 
 * 자바스크립트는 프로토타입 기반 객체지향 언어로서 클래스 기반 객체지향 언어와는 달리
 *  다양한 객체 생성 방법을 지원한다.
 *  (객체 리터럴, Object 생성자 함수, 생성자 함수, Object.create 메서드, 클래스{ES6})
 * 
 * 가장 일반적이고 간단한 방법은 객체 리터럴을 사용하는 방법은 객체 리터럴을 사용하는 방법이다.
 * 리터럴(literal)은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는
 *  표기법을 말한다.
 */

// 객체 리터럴은 중괄호({...}) 내에 0개 이상의 프로퍼티를 정의한다.
var person = {  // 변수에 할당되는 시점에 this.엔진은 객체 리터럴을 해석해 객체를 생성한다.
    name: 'Lee',
    sayHello: function () {
        console.log(`Hello! My name is ${this.name}.`);
    }
};

console.log(typeof person); // object
console.log(person); // {name: "Lee", sayHello: ƒ}