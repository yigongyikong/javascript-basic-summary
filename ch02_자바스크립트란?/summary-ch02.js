/**
 * 웹페이지의 보조적인 기능을 수행하기 위해 브라우저에서 동작하는 경량 프로그래밍 언어를 도입한
 *  결과물이 브렌던 아이크(Brendan Eich)가 개발한 자바스크립트다.
 * 브라우저에 따라 웹페이지가 정상적으로 동작하지 않은 크로스 브라우징 이슈가 발생했다.
 * 1996년 11월, 넷스케이프 커뮤니케이션즈는 컴퓨터 시스템의 표준을 관리하는
 *  비영리 표준화 기구인 ECMA 인터네셔널에 자바스크립트의 표준화를 요청한다.
 * 1997년 7월, ECMA-262라 불리는 표준화된 자바스크립트 초판(ECMAScript 1)
 *  사양이 완성되었고, 상표권 문제로 자바스크립트는 ECMAScript로 명명되었다.
 * 이후 1999년 ECMAScript 3(ES3)이 공개되고,
 *  10년 만인 2009년에 출시된 ECMAScript 5(ES5)는 HTML5와 함께 출현한 표준 사양이다.
 * 2015년에 공개된 ECMAScript 6(ECMAScript 2015, ES6)는 let/const 키워드,
 *  화살표 함수, 클래스, 모듈 등과 같이 범용 프로그래밍 언어로서 갖춰야 할 기능들을
 *  대거 도입하는 큰 변화가 있었다.
 * 
 * Node.js는 비동기 I/O를 지원하며 단일 스레드(single thread) 이벤트 루프 기반으로
 *  동작함으로써 요청(request) 처리 성능이 좋다.
 * 따라서 Node.js는 데이터를 실시간으로 처리하기 위해 I/O가 빈번하게 발생하는
 *  SPA(Single Page Application)에 적합하다.
 * 하지만 CPU 사용률이 높은 애플리케이션에는 권장하지 않는다.
 * ME) Node.js는 비동기 프로그래밍이 가능하고
 *  비동기 요청에 대한 콜백을 단일 스레드가 처리한다.
 *  단순히 비동기로 요청 및 응답을 받아 실시간으로 응답 값을 처리(전달)하는 SPA에는 적당하지만
 *  CPU 사용률이 높은 복잡한 연산이 필요한 시스템에는 적합하지 않다.
 *      (왜냐하면 다른 요청이 많이 밀릴 수 있기 때문이다.)
 * 
 * ECMAScript는 자바스크립트의 표준 사양인 ECMA-262를 말하며,
 *  프로그래밍 언어의 값, 타입, 객체의 프로퍼티, 함수,
 *  표준 빌트인 객체(standard built-in object) 등 핵심 문법을 규정한다.
 * 각 브라우저 제조사는 ECMAScript 사양을 준수해서
 *  브라우저에 내장되는 자바스크립트 엔진을 구현한다.
 * 자바스크립트는 일반적으로 프로그래밍 언어로서 기본 뼈대(core)를 이루는 ECMAScript와
 *  브라우저가 별도 지원하는 클라이언트 사이드 Web API,
 *  즉 DOM, BOM, Canvas, xMLHttpRequest, fetch, requestAnimationFrame,
 *  SVG, Web Storage, Web Component, Web Worker 등을 아우르는 개념이다.
 */